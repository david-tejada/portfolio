---
import { spring } from "motion";

const { class: className } = Astro.props;
---

<button class:list={["ml-auto flex items-center", className]} id="themeToggle">
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="36"
    height="36"
    viewBox="0 0 36 36"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    class="lucide lucide-moon-star"
  >
    <path class="circle" d="M18 9 a6 6, 0, 0 0, 9 9, 9 9 0 1 1-9-9"></path>

    <g class="star">
      <path d="M26 8 v4"></path>
      <path d="M28 10 h-4"></path>
    </g>

    <g class="sun-rays" stroke-width="0">
      <line class="line" x1="18" y1="29" x2="18" y2="32"></line>
      <line class="line" x1="18" y1="7" x2="18" y2="4"></line>
      <line class="line" x1="4" y1="18" x2="7" y2="18"></line>
      <line class="line" x1="32" y1="18" x2="29" y2="18"></line>
      <line class="line" x1="25.78" y1="25.78" x2="27.90" y2="27.90"></line>
      <line class="line" x1="10.22" y1="25.78" x2="8.10" y2="27.90"></line>
      <line class="line" x1="10.22" y1="10.22" x2="8.10" y2="8.10"></line>
      <line class="line" x1="25.78" y1="10.22" x2="27.90" y2="8.10"></line>
    </g>
  </svg>
</button>

<style
  define:vars={{
    spring: spring(0.5, 0.7),
  }}
>
  button {
    border: 0;
    background: none;
  }

  svg .circle {
    transition:
      d var(--spring),
      scale var(--spring) 150ms,
      stroke-width var(--spring) 150ms;
    transform-origin: center;
  }

  svg .star {
    transition: stroke-width var(--spring) 150ms;
  }

  svg .sun-rays {
    transition: stroke-width var(--spring) 150ms;
  }

  :global(.dark) svg .circle {
    d: path("M18 9 a9 9, 0, 0 1, 9 9, 9 9 0 1 1-9-9");
    scale: 0.65;
    stroke-width: 3.5;
  }

  :global(.dark) svg .star {
    stroke-width: 0;
  }

  :global(.dark) svg .sun-rays {
    stroke-width: 3;
  }
</style>

<script>
  const theme = (() => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })();

  if (theme === "light") {
    document.documentElement.classList.remove("dark");
  } else {
    document.documentElement.classList.add("dark");
  }

  window.localStorage.setItem("theme", theme);

  const handleToggleClick = () => {
    const element = document.documentElement;
    element.classList.toggle("dark");

    const isDark = element.classList.contains("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
  };

  document
    .getElementById("themeToggle")
    .addEventListener("click", handleToggleClick);
</script>
